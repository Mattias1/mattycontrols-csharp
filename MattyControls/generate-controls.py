import re

# The filenames (hardcoded, I know)
filename_from = 'MattyControls.template.cs'
filename_to = 'MattyControls.cs'



# Easy regex matches
def lineIs(line : str, search : str):
    pattern = re.compile('^\s*' + search + '\s*$')
    return bool(pattern.match(line))

specialPattern = re.compile('^\s*// --')
def lineIsSpecial(line : str):
    return bool(specialPattern.match(line))



# The control object
class Control:
    def __init__(self, typename : str, basetype : str):
        self.typename = typename
        self.basetype = basetype
        self.constructor = ''

    def writeToFile(self, fto):
        def w(s = ''):
            fto.write(s + '\n')

        w()
        w('public class {} : {}'.format(self.typename, self.basetype))
        w('{')
        w(controlcopy)
        w()
        w(self.constructor)
        w('}')



# The function that does all the parsing and compiling
status = 0
lines = []
controlcopy = ''
controls = []

def compile(line : str, fto):
    # Yeah, I know, a bit ugly, but hey, it works
    global status, lines, controlcopy, controls

    # normal (read and write directly)
    if status == 0:
        if lineIsSpecial(line):
            # Ok, pay attention now
            if lineIs(line, '// -- begin types --'):
                print('Begin types ...')
                status = 1
            elif lineIs(line, '// -- begin control copy --'):
                print('Begin control copy ...')
                status = 2
            elif lineIs(line, '// -- write controls --'):
                print('Write controls ...')
                for c in controls:
                    c.writeToFile(fto)
        else:
            fto.write(line)

    # Parse the types and corresponding constructor function(s)
    elif status == 1:
        if lineIsSpecial(line):
            # Finish the previous control
            try:
                controls[-1].constructor = ''.join(lines)
                lines = []
            except:
                pass

            # If there is no new control, go back to normal
            if lineIs(line, '// -- end types --'):
                status = 0
                lines = []
            else:
                # Start a new control
                m = re.search('^\s*// -- (\w+) : (\w+)\s*$', line)
                controls.append(Control(m.group(1), m.group(2)))
        else:
            # Save the constructor functions
            lines.append(line)

    # Copy the control methods
    elif status == 2:
        if lineIs(line, '// -- end control copy --'):
            # End of the control methods
            controlcopy = ''.join(lines)
            status = 0
            lines = []
        else:
            # Add to the control methods
            lines.append(line)



# Handle the file IO
with open(filename_to, 'w') as fto:
    fto.write('//\n')
    fto.write('// NOTICE: This file is generated. Do not edit this file manually, please edit the template instead.\n')
    fto.write('//\n')

    with open(filename_from) as ffrom:
        for line in ffrom:
            compile(line, fto)

print('Done')
